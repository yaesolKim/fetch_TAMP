// Generated by gencpp from file rosplan_knowledge_msgs/GetRDDLImmediateRewardRequest.msg
// DO NOT EDIT!


#ifndef ROSPLAN_KNOWLEDGE_MSGS_MESSAGE_GETRDDLIMMEDIATEREWARDREQUEST_H
#define ROSPLAN_KNOWLEDGE_MSGS_MESSAGE_GETRDDLIMMEDIATEREWARDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/String.h>

namespace rosplan_knowledge_msgs
{
template <class ContainerAllocator>
struct GetRDDLImmediateRewardRequest_
{
  typedef GetRDDLImmediateRewardRequest_<ContainerAllocator> Type;

  GetRDDLImmediateRewardRequest_()
    : action()  {
    }
  GetRDDLImmediateRewardRequest_(const ContainerAllocator& _alloc)
    : action(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::std_msgs::String_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::String_<ContainerAllocator> >::other >  _action_type;
  _action_type action;





  typedef boost::shared_ptr< ::rosplan_knowledge_msgs::GetRDDLImmediateRewardRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosplan_knowledge_msgs::GetRDDLImmediateRewardRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetRDDLImmediateRewardRequest_

typedef ::rosplan_knowledge_msgs::GetRDDLImmediateRewardRequest_<std::allocator<void> > GetRDDLImmediateRewardRequest;

typedef boost::shared_ptr< ::rosplan_knowledge_msgs::GetRDDLImmediateRewardRequest > GetRDDLImmediateRewardRequestPtr;
typedef boost::shared_ptr< ::rosplan_knowledge_msgs::GetRDDLImmediateRewardRequest const> GetRDDLImmediateRewardRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosplan_knowledge_msgs::GetRDDLImmediateRewardRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosplan_knowledge_msgs::GetRDDLImmediateRewardRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rosplan_knowledge_msgs::GetRDDLImmediateRewardRequest_<ContainerAllocator1> & lhs, const ::rosplan_knowledge_msgs::GetRDDLImmediateRewardRequest_<ContainerAllocator2> & rhs)
{
  return lhs.action == rhs.action;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rosplan_knowledge_msgs::GetRDDLImmediateRewardRequest_<ContainerAllocator1> & lhs, const ::rosplan_knowledge_msgs::GetRDDLImmediateRewardRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rosplan_knowledge_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rosplan_knowledge_msgs::GetRDDLImmediateRewardRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosplan_knowledge_msgs::GetRDDLImmediateRewardRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosplan_knowledge_msgs::GetRDDLImmediateRewardRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosplan_knowledge_msgs::GetRDDLImmediateRewardRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosplan_knowledge_msgs::GetRDDLImmediateRewardRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosplan_knowledge_msgs::GetRDDLImmediateRewardRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosplan_knowledge_msgs::GetRDDLImmediateRewardRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "82d47d99291b9d7a07526f5be97b9a5e";
  }

  static const char* value(const ::rosplan_knowledge_msgs::GetRDDLImmediateRewardRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x82d47d99291b9d7aULL;
  static const uint64_t static_value2 = 0x07526f5be97b9a5eULL;
};

template<class ContainerAllocator>
struct DataType< ::rosplan_knowledge_msgs::GetRDDLImmediateRewardRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosplan_knowledge_msgs/GetRDDLImmediateRewardRequest";
  }

  static const char* value(const ::rosplan_knowledge_msgs::GetRDDLImmediateRewardRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosplan_knowledge_msgs::GetRDDLImmediateRewardRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/String[] action # Instantiated actions in the last timestep (i.e. goto_Waypoint(kenny, printer)\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::rosplan_knowledge_msgs::GetRDDLImmediateRewardRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosplan_knowledge_msgs::GetRDDLImmediateRewardRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetRDDLImmediateRewardRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosplan_knowledge_msgs::GetRDDLImmediateRewardRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosplan_knowledge_msgs::GetRDDLImmediateRewardRequest_<ContainerAllocator>& v)
  {
    s << indent << "action[]" << std::endl;
    for (size_t i = 0; i < v.action.size(); ++i)
    {
      s << indent << "  action[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "    ", v.action[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSPLAN_KNOWLEDGE_MSGS_MESSAGE_GETRDDLIMMEDIATEREWARDREQUEST_H
