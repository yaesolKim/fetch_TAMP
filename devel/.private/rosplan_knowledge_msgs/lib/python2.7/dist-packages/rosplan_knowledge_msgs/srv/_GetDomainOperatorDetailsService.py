# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rosplan_knowledge_msgs/GetDomainOperatorDetailsServiceRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetDomainOperatorDetailsServiceRequest(genpy.Message):
  _md5sum = "c1f3d28f1b044c871e6eff2e9fc3c667"
  _type = "rosplan_knowledge_msgs/GetDomainOperatorDetailsServiceRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Fetching the Domain (2.5/3):
# Get all details of a specific operator in the domain.
string name
"""
  __slots__ = ['name']
  _slot_types = ['string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       name

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetDomainOperatorDetailsServiceRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.name is None:
        self.name = ''
    else:
      self.name = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rosplan_knowledge_msgs/GetDomainOperatorDetailsServiceResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import diagnostic_msgs.msg
import rosplan_knowledge_msgs.msg

class GetDomainOperatorDetailsServiceResponse(genpy.Message):
  _md5sum = "872f8f748f11d7f5b5f3f7a100689096"
  _type = "rosplan_knowledge_msgs/GetDomainOperatorDetailsServiceResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """rosplan_knowledge_msgs/DomainOperator op


================================================================================
MSG: rosplan_knowledge_msgs/DomainOperator
# A message used to represent an ungrounded operator in the domain.

# (1) name and parameters
rosplan_knowledge_msgs/DomainFormula formula

# (2) duration constraint


# (3) effect lists
rosplan_knowledge_msgs/DomainFormula[] at_start_add_effects
rosplan_knowledge_msgs/DomainFormula[] at_start_del_effects
rosplan_knowledge_msgs/DomainFormula[] at_end_add_effects
rosplan_knowledge_msgs/DomainFormula[] at_end_del_effects
rosplan_knowledge_msgs/DomainAssignment[] at_start_assign_effects
rosplan_knowledge_msgs/DomainAssignment[] at_end_assign_effects
rosplan_knowledge_msgs/ProbabilisticEffect[] probabilistic_effects

# (4) conditions
rosplan_knowledge_msgs/DomainFormula[] at_start_simple_condition
rosplan_knowledge_msgs/DomainFormula[] over_all_simple_condition
rosplan_knowledge_msgs/DomainFormula[] at_end_simple_condition
rosplan_knowledge_msgs/DomainFormula[] at_start_neg_condition
rosplan_knowledge_msgs/DomainFormula[] over_all_neg_condition
rosplan_knowledge_msgs/DomainFormula[] at_end_neg_condition
rosplan_knowledge_msgs/DomainInequality[] at_start_comparison
rosplan_knowledge_msgs/DomainInequality[] at_end_comparison
rosplan_knowledge_msgs/DomainInequality[] over_all_comparison

================================================================================
MSG: rosplan_knowledge_msgs/DomainFormula
# A message used to represent an atomic formula from the domain.
# typed_parameters matches label -> type
string name
diagnostic_msgs/KeyValue[] typed_parameters

================================================================================
MSG: diagnostic_msgs/KeyValue
string key # what to label this value when viewing
string value # a value to track over time

================================================================================
MSG: rosplan_knowledge_msgs/DomainAssignment
# A message used to store the numeric effects of an action
# Can be grounded or ungrounded

uint8 ASSIGN   = 0
uint8 INCREASE  = 1
uint8 DECREASE = 2
uint8 SCALE_UP = 3
uint8 SCALE_DOWN = 4
uint8 ASSIGN_CTS = 5

uint8 assign_type

rosplan_knowledge_msgs/DomainFormula LHS
rosplan_knowledge_msgs/ExprComposite RHS

bool grounded

================================================================================
MSG: rosplan_knowledge_msgs/ExprComposite
# A message used to represent a numerical expression; composite type (2/2)
# stores an array of ExprBase as prefix notation

# components
ExprBase[] tokens

================================================================================
MSG: rosplan_knowledge_msgs/ExprBase
# A message used to represent a numerical expression; base types (1/2)

# expression types
uint8 CONSTANT = 0
uint8 FUNCTION = 1
uint8 OPERATOR = 2
uint8 SPECIAL  = 3

# operators
uint8 ADD    = 0
uint8 SUB    = 1
uint8 MUL    = 2
uint8 DIV    = 3
uint8 UMINUS = 4

# special types
uint8 HASHT      = 0
uint8 TOTAL_TIME = 1
uint8 DURATION   = 2

# expression base type
uint8 expr_type

# constant value
float64 constant

# function
rosplan_knowledge_msgs/DomainFormula function

# operator
uint8 op

# special
uint8 special_type

================================================================================
MSG: rosplan_knowledge_msgs/ProbabilisticEffect
# Message used to represent a Probabilistic effect 
rosplan_knowledge_msgs/ExprComposite   probability
rosplan_knowledge_msgs/DomainFormula[] add_effects # Add effects
rosplan_knowledge_msgs/DomainFormula[] del_effects # Del effects
rosplan_knowledge_msgs/DomainAssignment[] assign_effects # Assign effects, mainly used for RDDL Discrete distribution
================================================================================
MSG: rosplan_knowledge_msgs/DomainInequality
# A message used to store the numeric effects of an action
# Can be grounded or ungrounded

uint8 GREATER   = 0
uint8 GREATEREQ = 1
uint8 LESS      = 2
uint8 LESSEQ    = 3
uint8 EQUALS    = 4

uint8 comparison_type

rosplan_knowledge_msgs/ExprComposite LHS
rosplan_knowledge_msgs/ExprComposite RHS

bool grounded
"""
  __slots__ = ['op']
  _slot_types = ['rosplan_knowledge_msgs/DomainOperator']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       op

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetDomainOperatorDetailsServiceResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.op is None:
        self.op = rosplan_knowledge_msgs.msg.DomainOperator()
    else:
      self.op = rosplan_knowledge_msgs.msg.DomainOperator()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.op.formula.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.op.formula.typed_parameters)
      buff.write(_struct_I.pack(length))
      for val1 in self.op.formula.typed_parameters:
        _x = val1.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.value
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.op.at_start_add_effects)
      buff.write(_struct_I.pack(length))
      for val1 in self.op.at_start_add_effects:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.typed_parameters)
        buff.write(_struct_I.pack(length))
        for val2 in val1.typed_parameters:
          _x = val2.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.op.at_start_del_effects)
      buff.write(_struct_I.pack(length))
      for val1 in self.op.at_start_del_effects:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.typed_parameters)
        buff.write(_struct_I.pack(length))
        for val2 in val1.typed_parameters:
          _x = val2.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.op.at_end_add_effects)
      buff.write(_struct_I.pack(length))
      for val1 in self.op.at_end_add_effects:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.typed_parameters)
        buff.write(_struct_I.pack(length))
        for val2 in val1.typed_parameters:
          _x = val2.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.op.at_end_del_effects)
      buff.write(_struct_I.pack(length))
      for val1 in self.op.at_end_del_effects:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.typed_parameters)
        buff.write(_struct_I.pack(length))
        for val2 in val1.typed_parameters:
          _x = val2.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.op.at_start_assign_effects)
      buff.write(_struct_I.pack(length))
      for val1 in self.op.at_start_assign_effects:
        _x = val1.assign_type
        buff.write(_get_struct_B().pack(_x))
        _v1 = val1.LHS
        _x = _v1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1.typed_parameters)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.typed_parameters:
          _x = val3.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v2 = val1.RHS
        length = len(_v2.tokens)
        buff.write(_struct_I.pack(length))
        for val3 in _v2.tokens:
          _x = val3
          buff.write(_get_struct_Bd().pack(_x.expr_type, _x.constant))
          _v3 = val3.function
          _x = _v3.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v3.typed_parameters)
          buff.write(_struct_I.pack(length))
          for val5 in _v3.typed_parameters:
            _x = val5.key
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val5.value
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3
          buff.write(_get_struct_2B().pack(_x.op, _x.special_type))
        _x = val1.grounded
        buff.write(_get_struct_B().pack(_x))
      length = len(self.op.at_end_assign_effects)
      buff.write(_struct_I.pack(length))
      for val1 in self.op.at_end_assign_effects:
        _x = val1.assign_type
        buff.write(_get_struct_B().pack(_x))
        _v4 = val1.LHS
        _x = _v4.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v4.typed_parameters)
        buff.write(_struct_I.pack(length))
        for val3 in _v4.typed_parameters:
          _x = val3.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v5 = val1.RHS
        length = len(_v5.tokens)
        buff.write(_struct_I.pack(length))
        for val3 in _v5.tokens:
          _x = val3
          buff.write(_get_struct_Bd().pack(_x.expr_type, _x.constant))
          _v6 = val3.function
          _x = _v6.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v6.typed_parameters)
          buff.write(_struct_I.pack(length))
          for val5 in _v6.typed_parameters:
            _x = val5.key
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val5.value
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3
          buff.write(_get_struct_2B().pack(_x.op, _x.special_type))
        _x = val1.grounded
        buff.write(_get_struct_B().pack(_x))
      length = len(self.op.probabilistic_effects)
      buff.write(_struct_I.pack(length))
      for val1 in self.op.probabilistic_effects:
        _v7 = val1.probability
        length = len(_v7.tokens)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.tokens:
          _x = val3
          buff.write(_get_struct_Bd().pack(_x.expr_type, _x.constant))
          _v8 = val3.function
          _x = _v8.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v8.typed_parameters)
          buff.write(_struct_I.pack(length))
          for val5 in _v8.typed_parameters:
            _x = val5.key
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val5.value
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3
          buff.write(_get_struct_2B().pack(_x.op, _x.special_type))
        length = len(val1.add_effects)
        buff.write(_struct_I.pack(length))
        for val2 in val1.add_effects:
          _x = val2.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(val2.typed_parameters)
          buff.write(_struct_I.pack(length))
          for val3 in val2.typed_parameters:
            _x = val3.key
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val3.value
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.del_effects)
        buff.write(_struct_I.pack(length))
        for val2 in val1.del_effects:
          _x = val2.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(val2.typed_parameters)
          buff.write(_struct_I.pack(length))
          for val3 in val2.typed_parameters:
            _x = val3.key
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val3.value
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.assign_effects)
        buff.write(_struct_I.pack(length))
        for val2 in val1.assign_effects:
          _x = val2.assign_type
          buff.write(_get_struct_B().pack(_x))
          _v9 = val2.LHS
          _x = _v9.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v9.typed_parameters)
          buff.write(_struct_I.pack(length))
          for val4 in _v9.typed_parameters:
            _x = val4.key
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val4.value
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v10 = val2.RHS
          length = len(_v10.tokens)
          buff.write(_struct_I.pack(length))
          for val4 in _v10.tokens:
            _x = val4
            buff.write(_get_struct_Bd().pack(_x.expr_type, _x.constant))
            _v11 = val4.function
            _x = _v11.name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            length = len(_v11.typed_parameters)
            buff.write(_struct_I.pack(length))
            for val6 in _v11.typed_parameters:
              _x = val6.key
              length = len(_x)
              if python3 or type(_x) == unicode:
                _x = _x.encode('utf-8')
                length = len(_x)
              buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
              _x = val6.value
              length = len(_x)
              if python3 or type(_x) == unicode:
                _x = _x.encode('utf-8')
                length = len(_x)
              buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val4
            buff.write(_get_struct_2B().pack(_x.op, _x.special_type))
          _x = val2.grounded
          buff.write(_get_struct_B().pack(_x))
      length = len(self.op.at_start_simple_condition)
      buff.write(_struct_I.pack(length))
      for val1 in self.op.at_start_simple_condition:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.typed_parameters)
        buff.write(_struct_I.pack(length))
        for val2 in val1.typed_parameters:
          _x = val2.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.op.over_all_simple_condition)
      buff.write(_struct_I.pack(length))
      for val1 in self.op.over_all_simple_condition:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.typed_parameters)
        buff.write(_struct_I.pack(length))
        for val2 in val1.typed_parameters:
          _x = val2.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.op.at_end_simple_condition)
      buff.write(_struct_I.pack(length))
      for val1 in self.op.at_end_simple_condition:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.typed_parameters)
        buff.write(_struct_I.pack(length))
        for val2 in val1.typed_parameters:
          _x = val2.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.op.at_start_neg_condition)
      buff.write(_struct_I.pack(length))
      for val1 in self.op.at_start_neg_condition:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.typed_parameters)
        buff.write(_struct_I.pack(length))
        for val2 in val1.typed_parameters:
          _x = val2.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.op.over_all_neg_condition)
      buff.write(_struct_I.pack(length))
      for val1 in self.op.over_all_neg_condition:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.typed_parameters)
        buff.write(_struct_I.pack(length))
        for val2 in val1.typed_parameters:
          _x = val2.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.op.at_end_neg_condition)
      buff.write(_struct_I.pack(length))
      for val1 in self.op.at_end_neg_condition:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.typed_parameters)
        buff.write(_struct_I.pack(length))
        for val2 in val1.typed_parameters:
          _x = val2.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.op.at_start_comparison)
      buff.write(_struct_I.pack(length))
      for val1 in self.op.at_start_comparison:
        _x = val1.comparison_type
        buff.write(_get_struct_B().pack(_x))
        _v12 = val1.LHS
        length = len(_v12.tokens)
        buff.write(_struct_I.pack(length))
        for val3 in _v12.tokens:
          _x = val3
          buff.write(_get_struct_Bd().pack(_x.expr_type, _x.constant))
          _v13 = val3.function
          _x = _v13.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v13.typed_parameters)
          buff.write(_struct_I.pack(length))
          for val5 in _v13.typed_parameters:
            _x = val5.key
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val5.value
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3
          buff.write(_get_struct_2B().pack(_x.op, _x.special_type))
        _v14 = val1.RHS
        length = len(_v14.tokens)
        buff.write(_struct_I.pack(length))
        for val3 in _v14.tokens:
          _x = val3
          buff.write(_get_struct_Bd().pack(_x.expr_type, _x.constant))
          _v15 = val3.function
          _x = _v15.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v15.typed_parameters)
          buff.write(_struct_I.pack(length))
          for val5 in _v15.typed_parameters:
            _x = val5.key
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val5.value
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3
          buff.write(_get_struct_2B().pack(_x.op, _x.special_type))
        _x = val1.grounded
        buff.write(_get_struct_B().pack(_x))
      length = len(self.op.at_end_comparison)
      buff.write(_struct_I.pack(length))
      for val1 in self.op.at_end_comparison:
        _x = val1.comparison_type
        buff.write(_get_struct_B().pack(_x))
        _v16 = val1.LHS
        length = len(_v16.tokens)
        buff.write(_struct_I.pack(length))
        for val3 in _v16.tokens:
          _x = val3
          buff.write(_get_struct_Bd().pack(_x.expr_type, _x.constant))
          _v17 = val3.function
          _x = _v17.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v17.typed_parameters)
          buff.write(_struct_I.pack(length))
          for val5 in _v17.typed_parameters:
            _x = val5.key
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val5.value
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3
          buff.write(_get_struct_2B().pack(_x.op, _x.special_type))
        _v18 = val1.RHS
        length = len(_v18.tokens)
        buff.write(_struct_I.pack(length))
        for val3 in _v18.tokens:
          _x = val3
          buff.write(_get_struct_Bd().pack(_x.expr_type, _x.constant))
          _v19 = val3.function
          _x = _v19.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v19.typed_parameters)
          buff.write(_struct_I.pack(length))
          for val5 in _v19.typed_parameters:
            _x = val5.key
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val5.value
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3
          buff.write(_get_struct_2B().pack(_x.op, _x.special_type))
        _x = val1.grounded
        buff.write(_get_struct_B().pack(_x))
      length = len(self.op.over_all_comparison)
      buff.write(_struct_I.pack(length))
      for val1 in self.op.over_all_comparison:
        _x = val1.comparison_type
        buff.write(_get_struct_B().pack(_x))
        _v20 = val1.LHS
        length = len(_v20.tokens)
        buff.write(_struct_I.pack(length))
        for val3 in _v20.tokens:
          _x = val3
          buff.write(_get_struct_Bd().pack(_x.expr_type, _x.constant))
          _v21 = val3.function
          _x = _v21.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v21.typed_parameters)
          buff.write(_struct_I.pack(length))
          for val5 in _v21.typed_parameters:
            _x = val5.key
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val5.value
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3
          buff.write(_get_struct_2B().pack(_x.op, _x.special_type))
        _v22 = val1.RHS
        length = len(_v22.tokens)
        buff.write(_struct_I.pack(length))
        for val3 in _v22.tokens:
          _x = val3
          buff.write(_get_struct_Bd().pack(_x.expr_type, _x.constant))
          _v23 = val3.function
          _x = _v23.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v23.typed_parameters)
          buff.write(_struct_I.pack(length))
          for val5 in _v23.typed_parameters:
            _x = val5.key
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val5.value
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3
          buff.write(_get_struct_2B().pack(_x.op, _x.special_type))
        _x = val1.grounded
        buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.op is None:
        self.op = rosplan_knowledge_msgs.msg.DomainOperator()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.op.formula.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.op.formula.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.op.formula.typed_parameters = []
      for i in range(0, length):
        val1 = diagnostic_msgs.msg.KeyValue()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.value = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.value = str[start:end]
        self.op.formula.typed_parameters.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.op.at_start_add_effects = []
      for i in range(0, length):
        val1 = rosplan_knowledge_msgs.msg.DomainFormula()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.typed_parameters = []
        for i in range(0, length):
          val2 = diagnostic_msgs.msg.KeyValue()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.key = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.value = str[start:end]
          val1.typed_parameters.append(val2)
        self.op.at_start_add_effects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.op.at_start_del_effects = []
      for i in range(0, length):
        val1 = rosplan_knowledge_msgs.msg.DomainFormula()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.typed_parameters = []
        for i in range(0, length):
          val2 = diagnostic_msgs.msg.KeyValue()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.key = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.value = str[start:end]
          val1.typed_parameters.append(val2)
        self.op.at_start_del_effects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.op.at_end_add_effects = []
      for i in range(0, length):
        val1 = rosplan_knowledge_msgs.msg.DomainFormula()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.typed_parameters = []
        for i in range(0, length):
          val2 = diagnostic_msgs.msg.KeyValue()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.key = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.value = str[start:end]
          val1.typed_parameters.append(val2)
        self.op.at_end_add_effects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.op.at_end_del_effects = []
      for i in range(0, length):
        val1 = rosplan_knowledge_msgs.msg.DomainFormula()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.typed_parameters = []
        for i in range(0, length):
          val2 = diagnostic_msgs.msg.KeyValue()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.key = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.value = str[start:end]
          val1.typed_parameters.append(val2)
        self.op.at_end_del_effects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.op.at_start_assign_effects = []
      for i in range(0, length):
        val1 = rosplan_knowledge_msgs.msg.DomainAssignment()
        start = end
        end += 1
        (val1.assign_type,) = _get_struct_B().unpack(str[start:end])
        _v24 = val1.LHS
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v24.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v24.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v24.typed_parameters = []
        for i in range(0, length):
          val3 = diagnostic_msgs.msg.KeyValue()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.key = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.value = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.value = str[start:end]
          _v24.typed_parameters.append(val3)
        _v25 = val1.RHS
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v25.tokens = []
        for i in range(0, length):
          val3 = rosplan_knowledge_msgs.msg.ExprBase()
          _x = val3
          start = end
          end += 9
          (_x.expr_type, _x.constant,) = _get_struct_Bd().unpack(str[start:end])
          _v26 = val3.function
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v26.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v26.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v26.typed_parameters = []
          for i in range(0, length):
            val5 = diagnostic_msgs.msg.KeyValue()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.key = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.key = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.value = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.value = str[start:end]
            _v26.typed_parameters.append(val5)
          _x = val3
          start = end
          end += 2
          (_x.op, _x.special_type,) = _get_struct_2B().unpack(str[start:end])
          _v25.tokens.append(val3)
        start = end
        end += 1
        (val1.grounded,) = _get_struct_B().unpack(str[start:end])
        val1.grounded = bool(val1.grounded)
        self.op.at_start_assign_effects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.op.at_end_assign_effects = []
      for i in range(0, length):
        val1 = rosplan_knowledge_msgs.msg.DomainAssignment()
        start = end
        end += 1
        (val1.assign_type,) = _get_struct_B().unpack(str[start:end])
        _v27 = val1.LHS
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v27.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v27.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v27.typed_parameters = []
        for i in range(0, length):
          val3 = diagnostic_msgs.msg.KeyValue()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.key = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.value = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.value = str[start:end]
          _v27.typed_parameters.append(val3)
        _v28 = val1.RHS
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v28.tokens = []
        for i in range(0, length):
          val3 = rosplan_knowledge_msgs.msg.ExprBase()
          _x = val3
          start = end
          end += 9
          (_x.expr_type, _x.constant,) = _get_struct_Bd().unpack(str[start:end])
          _v29 = val3.function
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v29.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v29.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v29.typed_parameters = []
          for i in range(0, length):
            val5 = diagnostic_msgs.msg.KeyValue()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.key = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.key = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.value = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.value = str[start:end]
            _v29.typed_parameters.append(val5)
          _x = val3
          start = end
          end += 2
          (_x.op, _x.special_type,) = _get_struct_2B().unpack(str[start:end])
          _v28.tokens.append(val3)
        start = end
        end += 1
        (val1.grounded,) = _get_struct_B().unpack(str[start:end])
        val1.grounded = bool(val1.grounded)
        self.op.at_end_assign_effects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.op.probabilistic_effects = []
      for i in range(0, length):
        val1 = rosplan_knowledge_msgs.msg.ProbabilisticEffect()
        _v30 = val1.probability
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v30.tokens = []
        for i in range(0, length):
          val3 = rosplan_knowledge_msgs.msg.ExprBase()
          _x = val3
          start = end
          end += 9
          (_x.expr_type, _x.constant,) = _get_struct_Bd().unpack(str[start:end])
          _v31 = val3.function
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v31.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v31.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v31.typed_parameters = []
          for i in range(0, length):
            val5 = diagnostic_msgs.msg.KeyValue()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.key = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.key = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.value = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.value = str[start:end]
            _v31.typed_parameters.append(val5)
          _x = val3
          start = end
          end += 2
          (_x.op, _x.special_type,) = _get_struct_2B().unpack(str[start:end])
          _v30.tokens.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.add_effects = []
        for i in range(0, length):
          val2 = rosplan_knowledge_msgs.msg.DomainFormula()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.typed_parameters = []
          for i in range(0, length):
            val3 = diagnostic_msgs.msg.KeyValue()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3.key = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val3.key = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3.value = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val3.value = str[start:end]
            val2.typed_parameters.append(val3)
          val1.add_effects.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.del_effects = []
        for i in range(0, length):
          val2 = rosplan_knowledge_msgs.msg.DomainFormula()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.typed_parameters = []
          for i in range(0, length):
            val3 = diagnostic_msgs.msg.KeyValue()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3.key = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val3.key = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3.value = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val3.value = str[start:end]
            val2.typed_parameters.append(val3)
          val1.del_effects.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.assign_effects = []
        for i in range(0, length):
          val2 = rosplan_knowledge_msgs.msg.DomainAssignment()
          start = end
          end += 1
          (val2.assign_type,) = _get_struct_B().unpack(str[start:end])
          _v32 = val2.LHS
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v32.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v32.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v32.typed_parameters = []
          for i in range(0, length):
            val4 = diagnostic_msgs.msg.KeyValue()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4.key = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val4.key = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4.value = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val4.value = str[start:end]
            _v32.typed_parameters.append(val4)
          _v33 = val2.RHS
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v33.tokens = []
          for i in range(0, length):
            val4 = rosplan_knowledge_msgs.msg.ExprBase()
            _x = val4
            start = end
            end += 9
            (_x.expr_type, _x.constant,) = _get_struct_Bd().unpack(str[start:end])
            _v34 = val4.function
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v34.name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v34.name = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v34.typed_parameters = []
            for i in range(0, length):
              val6 = diagnostic_msgs.msg.KeyValue()
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              start = end
              end += length
              if python3:
                val6.key = str[start:end].decode('utf-8', 'rosmsg')
              else:
                val6.key = str[start:end]
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              start = end
              end += length
              if python3:
                val6.value = str[start:end].decode('utf-8', 'rosmsg')
              else:
                val6.value = str[start:end]
              _v34.typed_parameters.append(val6)
            _x = val4
            start = end
            end += 2
            (_x.op, _x.special_type,) = _get_struct_2B().unpack(str[start:end])
            _v33.tokens.append(val4)
          start = end
          end += 1
          (val2.grounded,) = _get_struct_B().unpack(str[start:end])
          val2.grounded = bool(val2.grounded)
          val1.assign_effects.append(val2)
        self.op.probabilistic_effects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.op.at_start_simple_condition = []
      for i in range(0, length):
        val1 = rosplan_knowledge_msgs.msg.DomainFormula()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.typed_parameters = []
        for i in range(0, length):
          val2 = diagnostic_msgs.msg.KeyValue()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.key = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.value = str[start:end]
          val1.typed_parameters.append(val2)
        self.op.at_start_simple_condition.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.op.over_all_simple_condition = []
      for i in range(0, length):
        val1 = rosplan_knowledge_msgs.msg.DomainFormula()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.typed_parameters = []
        for i in range(0, length):
          val2 = diagnostic_msgs.msg.KeyValue()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.key = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.value = str[start:end]
          val1.typed_parameters.append(val2)
        self.op.over_all_simple_condition.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.op.at_end_simple_condition = []
      for i in range(0, length):
        val1 = rosplan_knowledge_msgs.msg.DomainFormula()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.typed_parameters = []
        for i in range(0, length):
          val2 = diagnostic_msgs.msg.KeyValue()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.key = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.value = str[start:end]
          val1.typed_parameters.append(val2)
        self.op.at_end_simple_condition.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.op.at_start_neg_condition = []
      for i in range(0, length):
        val1 = rosplan_knowledge_msgs.msg.DomainFormula()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.typed_parameters = []
        for i in range(0, length):
          val2 = diagnostic_msgs.msg.KeyValue()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.key = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.value = str[start:end]
          val1.typed_parameters.append(val2)
        self.op.at_start_neg_condition.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.op.over_all_neg_condition = []
      for i in range(0, length):
        val1 = rosplan_knowledge_msgs.msg.DomainFormula()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.typed_parameters = []
        for i in range(0, length):
          val2 = diagnostic_msgs.msg.KeyValue()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.key = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.value = str[start:end]
          val1.typed_parameters.append(val2)
        self.op.over_all_neg_condition.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.op.at_end_neg_condition = []
      for i in range(0, length):
        val1 = rosplan_knowledge_msgs.msg.DomainFormula()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.typed_parameters = []
        for i in range(0, length):
          val2 = diagnostic_msgs.msg.KeyValue()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.key = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.value = str[start:end]
          val1.typed_parameters.append(val2)
        self.op.at_end_neg_condition.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.op.at_start_comparison = []
      for i in range(0, length):
        val1 = rosplan_knowledge_msgs.msg.DomainInequality()
        start = end
        end += 1
        (val1.comparison_type,) = _get_struct_B().unpack(str[start:end])
        _v35 = val1.LHS
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v35.tokens = []
        for i in range(0, length):
          val3 = rosplan_knowledge_msgs.msg.ExprBase()
          _x = val3
          start = end
          end += 9
          (_x.expr_type, _x.constant,) = _get_struct_Bd().unpack(str[start:end])
          _v36 = val3.function
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v36.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v36.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v36.typed_parameters = []
          for i in range(0, length):
            val5 = diagnostic_msgs.msg.KeyValue()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.key = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.key = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.value = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.value = str[start:end]
            _v36.typed_parameters.append(val5)
          _x = val3
          start = end
          end += 2
          (_x.op, _x.special_type,) = _get_struct_2B().unpack(str[start:end])
          _v35.tokens.append(val3)
        _v37 = val1.RHS
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v37.tokens = []
        for i in range(0, length):
          val3 = rosplan_knowledge_msgs.msg.ExprBase()
          _x = val3
          start = end
          end += 9
          (_x.expr_type, _x.constant,) = _get_struct_Bd().unpack(str[start:end])
          _v38 = val3.function
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v38.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v38.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v38.typed_parameters = []
          for i in range(0, length):
            val5 = diagnostic_msgs.msg.KeyValue()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.key = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.key = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.value = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.value = str[start:end]
            _v38.typed_parameters.append(val5)
          _x = val3
          start = end
          end += 2
          (_x.op, _x.special_type,) = _get_struct_2B().unpack(str[start:end])
          _v37.tokens.append(val3)
        start = end
        end += 1
        (val1.grounded,) = _get_struct_B().unpack(str[start:end])
        val1.grounded = bool(val1.grounded)
        self.op.at_start_comparison.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.op.at_end_comparison = []
      for i in range(0, length):
        val1 = rosplan_knowledge_msgs.msg.DomainInequality()
        start = end
        end += 1
        (val1.comparison_type,) = _get_struct_B().unpack(str[start:end])
        _v39 = val1.LHS
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v39.tokens = []
        for i in range(0, length):
          val3 = rosplan_knowledge_msgs.msg.ExprBase()
          _x = val3
          start = end
          end += 9
          (_x.expr_type, _x.constant,) = _get_struct_Bd().unpack(str[start:end])
          _v40 = val3.function
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v40.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v40.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v40.typed_parameters = []
          for i in range(0, length):
            val5 = diagnostic_msgs.msg.KeyValue()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.key = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.key = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.value = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.value = str[start:end]
            _v40.typed_parameters.append(val5)
          _x = val3
          start = end
          end += 2
          (_x.op, _x.special_type,) = _get_struct_2B().unpack(str[start:end])
          _v39.tokens.append(val3)
        _v41 = val1.RHS
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v41.tokens = []
        for i in range(0, length):
          val3 = rosplan_knowledge_msgs.msg.ExprBase()
          _x = val3
          start = end
          end += 9
          (_x.expr_type, _x.constant,) = _get_struct_Bd().unpack(str[start:end])
          _v42 = val3.function
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v42.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v42.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v42.typed_parameters = []
          for i in range(0, length):
            val5 = diagnostic_msgs.msg.KeyValue()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.key = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.key = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.value = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.value = str[start:end]
            _v42.typed_parameters.append(val5)
          _x = val3
          start = end
          end += 2
          (_x.op, _x.special_type,) = _get_struct_2B().unpack(str[start:end])
          _v41.tokens.append(val3)
        start = end
        end += 1
        (val1.grounded,) = _get_struct_B().unpack(str[start:end])
        val1.grounded = bool(val1.grounded)
        self.op.at_end_comparison.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.op.over_all_comparison = []
      for i in range(0, length):
        val1 = rosplan_knowledge_msgs.msg.DomainInequality()
        start = end
        end += 1
        (val1.comparison_type,) = _get_struct_B().unpack(str[start:end])
        _v43 = val1.LHS
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v43.tokens = []
        for i in range(0, length):
          val3 = rosplan_knowledge_msgs.msg.ExprBase()
          _x = val3
          start = end
          end += 9
          (_x.expr_type, _x.constant,) = _get_struct_Bd().unpack(str[start:end])
          _v44 = val3.function
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v44.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v44.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v44.typed_parameters = []
          for i in range(0, length):
            val5 = diagnostic_msgs.msg.KeyValue()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.key = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.key = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.value = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.value = str[start:end]
            _v44.typed_parameters.append(val5)
          _x = val3
          start = end
          end += 2
          (_x.op, _x.special_type,) = _get_struct_2B().unpack(str[start:end])
          _v43.tokens.append(val3)
        _v45 = val1.RHS
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v45.tokens = []
        for i in range(0, length):
          val3 = rosplan_knowledge_msgs.msg.ExprBase()
          _x = val3
          start = end
          end += 9
          (_x.expr_type, _x.constant,) = _get_struct_Bd().unpack(str[start:end])
          _v46 = val3.function
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v46.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v46.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v46.typed_parameters = []
          for i in range(0, length):
            val5 = diagnostic_msgs.msg.KeyValue()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.key = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.key = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.value = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.value = str[start:end]
            _v46.typed_parameters.append(val5)
          _x = val3
          start = end
          end += 2
          (_x.op, _x.special_type,) = _get_struct_2B().unpack(str[start:end])
          _v45.tokens.append(val3)
        start = end
        end += 1
        (val1.grounded,) = _get_struct_B().unpack(str[start:end])
        val1.grounded = bool(val1.grounded)
        self.op.over_all_comparison.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.op.formula.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.op.formula.typed_parameters)
      buff.write(_struct_I.pack(length))
      for val1 in self.op.formula.typed_parameters:
        _x = val1.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.value
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.op.at_start_add_effects)
      buff.write(_struct_I.pack(length))
      for val1 in self.op.at_start_add_effects:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.typed_parameters)
        buff.write(_struct_I.pack(length))
        for val2 in val1.typed_parameters:
          _x = val2.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.op.at_start_del_effects)
      buff.write(_struct_I.pack(length))
      for val1 in self.op.at_start_del_effects:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.typed_parameters)
        buff.write(_struct_I.pack(length))
        for val2 in val1.typed_parameters:
          _x = val2.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.op.at_end_add_effects)
      buff.write(_struct_I.pack(length))
      for val1 in self.op.at_end_add_effects:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.typed_parameters)
        buff.write(_struct_I.pack(length))
        for val2 in val1.typed_parameters:
          _x = val2.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.op.at_end_del_effects)
      buff.write(_struct_I.pack(length))
      for val1 in self.op.at_end_del_effects:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.typed_parameters)
        buff.write(_struct_I.pack(length))
        for val2 in val1.typed_parameters:
          _x = val2.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.op.at_start_assign_effects)
      buff.write(_struct_I.pack(length))
      for val1 in self.op.at_start_assign_effects:
        _x = val1.assign_type
        buff.write(_get_struct_B().pack(_x))
        _v47 = val1.LHS
        _x = _v47.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v47.typed_parameters)
        buff.write(_struct_I.pack(length))
        for val3 in _v47.typed_parameters:
          _x = val3.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v48 = val1.RHS
        length = len(_v48.tokens)
        buff.write(_struct_I.pack(length))
        for val3 in _v48.tokens:
          _x = val3
          buff.write(_get_struct_Bd().pack(_x.expr_type, _x.constant))
          _v49 = val3.function
          _x = _v49.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v49.typed_parameters)
          buff.write(_struct_I.pack(length))
          for val5 in _v49.typed_parameters:
            _x = val5.key
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val5.value
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3
          buff.write(_get_struct_2B().pack(_x.op, _x.special_type))
        _x = val1.grounded
        buff.write(_get_struct_B().pack(_x))
      length = len(self.op.at_end_assign_effects)
      buff.write(_struct_I.pack(length))
      for val1 in self.op.at_end_assign_effects:
        _x = val1.assign_type
        buff.write(_get_struct_B().pack(_x))
        _v50 = val1.LHS
        _x = _v50.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v50.typed_parameters)
        buff.write(_struct_I.pack(length))
        for val3 in _v50.typed_parameters:
          _x = val3.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v51 = val1.RHS
        length = len(_v51.tokens)
        buff.write(_struct_I.pack(length))
        for val3 in _v51.tokens:
          _x = val3
          buff.write(_get_struct_Bd().pack(_x.expr_type, _x.constant))
          _v52 = val3.function
          _x = _v52.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v52.typed_parameters)
          buff.write(_struct_I.pack(length))
          for val5 in _v52.typed_parameters:
            _x = val5.key
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val5.value
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3
          buff.write(_get_struct_2B().pack(_x.op, _x.special_type))
        _x = val1.grounded
        buff.write(_get_struct_B().pack(_x))
      length = len(self.op.probabilistic_effects)
      buff.write(_struct_I.pack(length))
      for val1 in self.op.probabilistic_effects:
        _v53 = val1.probability
        length = len(_v53.tokens)
        buff.write(_struct_I.pack(length))
        for val3 in _v53.tokens:
          _x = val3
          buff.write(_get_struct_Bd().pack(_x.expr_type, _x.constant))
          _v54 = val3.function
          _x = _v54.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v54.typed_parameters)
          buff.write(_struct_I.pack(length))
          for val5 in _v54.typed_parameters:
            _x = val5.key
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val5.value
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3
          buff.write(_get_struct_2B().pack(_x.op, _x.special_type))
        length = len(val1.add_effects)
        buff.write(_struct_I.pack(length))
        for val2 in val1.add_effects:
          _x = val2.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(val2.typed_parameters)
          buff.write(_struct_I.pack(length))
          for val3 in val2.typed_parameters:
            _x = val3.key
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val3.value
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.del_effects)
        buff.write(_struct_I.pack(length))
        for val2 in val1.del_effects:
          _x = val2.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(val2.typed_parameters)
          buff.write(_struct_I.pack(length))
          for val3 in val2.typed_parameters:
            _x = val3.key
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val3.value
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.assign_effects)
        buff.write(_struct_I.pack(length))
        for val2 in val1.assign_effects:
          _x = val2.assign_type
          buff.write(_get_struct_B().pack(_x))
          _v55 = val2.LHS
          _x = _v55.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v55.typed_parameters)
          buff.write(_struct_I.pack(length))
          for val4 in _v55.typed_parameters:
            _x = val4.key
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val4.value
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v56 = val2.RHS
          length = len(_v56.tokens)
          buff.write(_struct_I.pack(length))
          for val4 in _v56.tokens:
            _x = val4
            buff.write(_get_struct_Bd().pack(_x.expr_type, _x.constant))
            _v57 = val4.function
            _x = _v57.name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            length = len(_v57.typed_parameters)
            buff.write(_struct_I.pack(length))
            for val6 in _v57.typed_parameters:
              _x = val6.key
              length = len(_x)
              if python3 or type(_x) == unicode:
                _x = _x.encode('utf-8')
                length = len(_x)
              buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
              _x = val6.value
              length = len(_x)
              if python3 or type(_x) == unicode:
                _x = _x.encode('utf-8')
                length = len(_x)
              buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val4
            buff.write(_get_struct_2B().pack(_x.op, _x.special_type))
          _x = val2.grounded
          buff.write(_get_struct_B().pack(_x))
      length = len(self.op.at_start_simple_condition)
      buff.write(_struct_I.pack(length))
      for val1 in self.op.at_start_simple_condition:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.typed_parameters)
        buff.write(_struct_I.pack(length))
        for val2 in val1.typed_parameters:
          _x = val2.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.op.over_all_simple_condition)
      buff.write(_struct_I.pack(length))
      for val1 in self.op.over_all_simple_condition:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.typed_parameters)
        buff.write(_struct_I.pack(length))
        for val2 in val1.typed_parameters:
          _x = val2.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.op.at_end_simple_condition)
      buff.write(_struct_I.pack(length))
      for val1 in self.op.at_end_simple_condition:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.typed_parameters)
        buff.write(_struct_I.pack(length))
        for val2 in val1.typed_parameters:
          _x = val2.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.op.at_start_neg_condition)
      buff.write(_struct_I.pack(length))
      for val1 in self.op.at_start_neg_condition:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.typed_parameters)
        buff.write(_struct_I.pack(length))
        for val2 in val1.typed_parameters:
          _x = val2.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.op.over_all_neg_condition)
      buff.write(_struct_I.pack(length))
      for val1 in self.op.over_all_neg_condition:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.typed_parameters)
        buff.write(_struct_I.pack(length))
        for val2 in val1.typed_parameters:
          _x = val2.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.op.at_end_neg_condition)
      buff.write(_struct_I.pack(length))
      for val1 in self.op.at_end_neg_condition:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.typed_parameters)
        buff.write(_struct_I.pack(length))
        for val2 in val1.typed_parameters:
          _x = val2.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.op.at_start_comparison)
      buff.write(_struct_I.pack(length))
      for val1 in self.op.at_start_comparison:
        _x = val1.comparison_type
        buff.write(_get_struct_B().pack(_x))
        _v58 = val1.LHS
        length = len(_v58.tokens)
        buff.write(_struct_I.pack(length))
        for val3 in _v58.tokens:
          _x = val3
          buff.write(_get_struct_Bd().pack(_x.expr_type, _x.constant))
          _v59 = val3.function
          _x = _v59.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v59.typed_parameters)
          buff.write(_struct_I.pack(length))
          for val5 in _v59.typed_parameters:
            _x = val5.key
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val5.value
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3
          buff.write(_get_struct_2B().pack(_x.op, _x.special_type))
        _v60 = val1.RHS
        length = len(_v60.tokens)
        buff.write(_struct_I.pack(length))
        for val3 in _v60.tokens:
          _x = val3
          buff.write(_get_struct_Bd().pack(_x.expr_type, _x.constant))
          _v61 = val3.function
          _x = _v61.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v61.typed_parameters)
          buff.write(_struct_I.pack(length))
          for val5 in _v61.typed_parameters:
            _x = val5.key
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val5.value
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3
          buff.write(_get_struct_2B().pack(_x.op, _x.special_type))
        _x = val1.grounded
        buff.write(_get_struct_B().pack(_x))
      length = len(self.op.at_end_comparison)
      buff.write(_struct_I.pack(length))
      for val1 in self.op.at_end_comparison:
        _x = val1.comparison_type
        buff.write(_get_struct_B().pack(_x))
        _v62 = val1.LHS
        length = len(_v62.tokens)
        buff.write(_struct_I.pack(length))
        for val3 in _v62.tokens:
          _x = val3
          buff.write(_get_struct_Bd().pack(_x.expr_type, _x.constant))
          _v63 = val3.function
          _x = _v63.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v63.typed_parameters)
          buff.write(_struct_I.pack(length))
          for val5 in _v63.typed_parameters:
            _x = val5.key
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val5.value
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3
          buff.write(_get_struct_2B().pack(_x.op, _x.special_type))
        _v64 = val1.RHS
        length = len(_v64.tokens)
        buff.write(_struct_I.pack(length))
        for val3 in _v64.tokens:
          _x = val3
          buff.write(_get_struct_Bd().pack(_x.expr_type, _x.constant))
          _v65 = val3.function
          _x = _v65.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v65.typed_parameters)
          buff.write(_struct_I.pack(length))
          for val5 in _v65.typed_parameters:
            _x = val5.key
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val5.value
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3
          buff.write(_get_struct_2B().pack(_x.op, _x.special_type))
        _x = val1.grounded
        buff.write(_get_struct_B().pack(_x))
      length = len(self.op.over_all_comparison)
      buff.write(_struct_I.pack(length))
      for val1 in self.op.over_all_comparison:
        _x = val1.comparison_type
        buff.write(_get_struct_B().pack(_x))
        _v66 = val1.LHS
        length = len(_v66.tokens)
        buff.write(_struct_I.pack(length))
        for val3 in _v66.tokens:
          _x = val3
          buff.write(_get_struct_Bd().pack(_x.expr_type, _x.constant))
          _v67 = val3.function
          _x = _v67.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v67.typed_parameters)
          buff.write(_struct_I.pack(length))
          for val5 in _v67.typed_parameters:
            _x = val5.key
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val5.value
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3
          buff.write(_get_struct_2B().pack(_x.op, _x.special_type))
        _v68 = val1.RHS
        length = len(_v68.tokens)
        buff.write(_struct_I.pack(length))
        for val3 in _v68.tokens:
          _x = val3
          buff.write(_get_struct_Bd().pack(_x.expr_type, _x.constant))
          _v69 = val3.function
          _x = _v69.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v69.typed_parameters)
          buff.write(_struct_I.pack(length))
          for val5 in _v69.typed_parameters:
            _x = val5.key
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val5.value
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3
          buff.write(_get_struct_2B().pack(_x.op, _x.special_type))
        _x = val1.grounded
        buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.op is None:
        self.op = rosplan_knowledge_msgs.msg.DomainOperator()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.op.formula.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.op.formula.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.op.formula.typed_parameters = []
      for i in range(0, length):
        val1 = diagnostic_msgs.msg.KeyValue()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.value = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.value = str[start:end]
        self.op.formula.typed_parameters.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.op.at_start_add_effects = []
      for i in range(0, length):
        val1 = rosplan_knowledge_msgs.msg.DomainFormula()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.typed_parameters = []
        for i in range(0, length):
          val2 = diagnostic_msgs.msg.KeyValue()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.key = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.value = str[start:end]
          val1.typed_parameters.append(val2)
        self.op.at_start_add_effects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.op.at_start_del_effects = []
      for i in range(0, length):
        val1 = rosplan_knowledge_msgs.msg.DomainFormula()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.typed_parameters = []
        for i in range(0, length):
          val2 = diagnostic_msgs.msg.KeyValue()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.key = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.value = str[start:end]
          val1.typed_parameters.append(val2)
        self.op.at_start_del_effects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.op.at_end_add_effects = []
      for i in range(0, length):
        val1 = rosplan_knowledge_msgs.msg.DomainFormula()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.typed_parameters = []
        for i in range(0, length):
          val2 = diagnostic_msgs.msg.KeyValue()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.key = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.value = str[start:end]
          val1.typed_parameters.append(val2)
        self.op.at_end_add_effects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.op.at_end_del_effects = []
      for i in range(0, length):
        val1 = rosplan_knowledge_msgs.msg.DomainFormula()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.typed_parameters = []
        for i in range(0, length):
          val2 = diagnostic_msgs.msg.KeyValue()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.key = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.value = str[start:end]
          val1.typed_parameters.append(val2)
        self.op.at_end_del_effects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.op.at_start_assign_effects = []
      for i in range(0, length):
        val1 = rosplan_knowledge_msgs.msg.DomainAssignment()
        start = end
        end += 1
        (val1.assign_type,) = _get_struct_B().unpack(str[start:end])
        _v70 = val1.LHS
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v70.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v70.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v70.typed_parameters = []
        for i in range(0, length):
          val3 = diagnostic_msgs.msg.KeyValue()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.key = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.value = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.value = str[start:end]
          _v70.typed_parameters.append(val3)
        _v71 = val1.RHS
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v71.tokens = []
        for i in range(0, length):
          val3 = rosplan_knowledge_msgs.msg.ExprBase()
          _x = val3
          start = end
          end += 9
          (_x.expr_type, _x.constant,) = _get_struct_Bd().unpack(str[start:end])
          _v72 = val3.function
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v72.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v72.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v72.typed_parameters = []
          for i in range(0, length):
            val5 = diagnostic_msgs.msg.KeyValue()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.key = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.key = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.value = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.value = str[start:end]
            _v72.typed_parameters.append(val5)
          _x = val3
          start = end
          end += 2
          (_x.op, _x.special_type,) = _get_struct_2B().unpack(str[start:end])
          _v71.tokens.append(val3)
        start = end
        end += 1
        (val1.grounded,) = _get_struct_B().unpack(str[start:end])
        val1.grounded = bool(val1.grounded)
        self.op.at_start_assign_effects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.op.at_end_assign_effects = []
      for i in range(0, length):
        val1 = rosplan_knowledge_msgs.msg.DomainAssignment()
        start = end
        end += 1
        (val1.assign_type,) = _get_struct_B().unpack(str[start:end])
        _v73 = val1.LHS
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v73.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v73.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v73.typed_parameters = []
        for i in range(0, length):
          val3 = diagnostic_msgs.msg.KeyValue()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.key = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.value = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.value = str[start:end]
          _v73.typed_parameters.append(val3)
        _v74 = val1.RHS
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v74.tokens = []
        for i in range(0, length):
          val3 = rosplan_knowledge_msgs.msg.ExprBase()
          _x = val3
          start = end
          end += 9
          (_x.expr_type, _x.constant,) = _get_struct_Bd().unpack(str[start:end])
          _v75 = val3.function
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v75.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v75.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v75.typed_parameters = []
          for i in range(0, length):
            val5 = diagnostic_msgs.msg.KeyValue()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.key = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.key = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.value = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.value = str[start:end]
            _v75.typed_parameters.append(val5)
          _x = val3
          start = end
          end += 2
          (_x.op, _x.special_type,) = _get_struct_2B().unpack(str[start:end])
          _v74.tokens.append(val3)
        start = end
        end += 1
        (val1.grounded,) = _get_struct_B().unpack(str[start:end])
        val1.grounded = bool(val1.grounded)
        self.op.at_end_assign_effects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.op.probabilistic_effects = []
      for i in range(0, length):
        val1 = rosplan_knowledge_msgs.msg.ProbabilisticEffect()
        _v76 = val1.probability
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v76.tokens = []
        for i in range(0, length):
          val3 = rosplan_knowledge_msgs.msg.ExprBase()
          _x = val3
          start = end
          end += 9
          (_x.expr_type, _x.constant,) = _get_struct_Bd().unpack(str[start:end])
          _v77 = val3.function
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v77.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v77.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v77.typed_parameters = []
          for i in range(0, length):
            val5 = diagnostic_msgs.msg.KeyValue()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.key = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.key = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.value = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.value = str[start:end]
            _v77.typed_parameters.append(val5)
          _x = val3
          start = end
          end += 2
          (_x.op, _x.special_type,) = _get_struct_2B().unpack(str[start:end])
          _v76.tokens.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.add_effects = []
        for i in range(0, length):
          val2 = rosplan_knowledge_msgs.msg.DomainFormula()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.typed_parameters = []
          for i in range(0, length):
            val3 = diagnostic_msgs.msg.KeyValue()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3.key = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val3.key = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3.value = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val3.value = str[start:end]
            val2.typed_parameters.append(val3)
          val1.add_effects.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.del_effects = []
        for i in range(0, length):
          val2 = rosplan_knowledge_msgs.msg.DomainFormula()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.typed_parameters = []
          for i in range(0, length):
            val3 = diagnostic_msgs.msg.KeyValue()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3.key = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val3.key = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3.value = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val3.value = str[start:end]
            val2.typed_parameters.append(val3)
          val1.del_effects.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.assign_effects = []
        for i in range(0, length):
          val2 = rosplan_knowledge_msgs.msg.DomainAssignment()
          start = end
          end += 1
          (val2.assign_type,) = _get_struct_B().unpack(str[start:end])
          _v78 = val2.LHS
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v78.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v78.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v78.typed_parameters = []
          for i in range(0, length):
            val4 = diagnostic_msgs.msg.KeyValue()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4.key = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val4.key = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4.value = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val4.value = str[start:end]
            _v78.typed_parameters.append(val4)
          _v79 = val2.RHS
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v79.tokens = []
          for i in range(0, length):
            val4 = rosplan_knowledge_msgs.msg.ExprBase()
            _x = val4
            start = end
            end += 9
            (_x.expr_type, _x.constant,) = _get_struct_Bd().unpack(str[start:end])
            _v80 = val4.function
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v80.name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v80.name = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v80.typed_parameters = []
            for i in range(0, length):
              val6 = diagnostic_msgs.msg.KeyValue()
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              start = end
              end += length
              if python3:
                val6.key = str[start:end].decode('utf-8', 'rosmsg')
              else:
                val6.key = str[start:end]
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              start = end
              end += length
              if python3:
                val6.value = str[start:end].decode('utf-8', 'rosmsg')
              else:
                val6.value = str[start:end]
              _v80.typed_parameters.append(val6)
            _x = val4
            start = end
            end += 2
            (_x.op, _x.special_type,) = _get_struct_2B().unpack(str[start:end])
            _v79.tokens.append(val4)
          start = end
          end += 1
          (val2.grounded,) = _get_struct_B().unpack(str[start:end])
          val2.grounded = bool(val2.grounded)
          val1.assign_effects.append(val2)
        self.op.probabilistic_effects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.op.at_start_simple_condition = []
      for i in range(0, length):
        val1 = rosplan_knowledge_msgs.msg.DomainFormula()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.typed_parameters = []
        for i in range(0, length):
          val2 = diagnostic_msgs.msg.KeyValue()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.key = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.value = str[start:end]
          val1.typed_parameters.append(val2)
        self.op.at_start_simple_condition.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.op.over_all_simple_condition = []
      for i in range(0, length):
        val1 = rosplan_knowledge_msgs.msg.DomainFormula()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.typed_parameters = []
        for i in range(0, length):
          val2 = diagnostic_msgs.msg.KeyValue()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.key = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.value = str[start:end]
          val1.typed_parameters.append(val2)
        self.op.over_all_simple_condition.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.op.at_end_simple_condition = []
      for i in range(0, length):
        val1 = rosplan_knowledge_msgs.msg.DomainFormula()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.typed_parameters = []
        for i in range(0, length):
          val2 = diagnostic_msgs.msg.KeyValue()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.key = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.value = str[start:end]
          val1.typed_parameters.append(val2)
        self.op.at_end_simple_condition.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.op.at_start_neg_condition = []
      for i in range(0, length):
        val1 = rosplan_knowledge_msgs.msg.DomainFormula()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.typed_parameters = []
        for i in range(0, length):
          val2 = diagnostic_msgs.msg.KeyValue()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.key = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.value = str[start:end]
          val1.typed_parameters.append(val2)
        self.op.at_start_neg_condition.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.op.over_all_neg_condition = []
      for i in range(0, length):
        val1 = rosplan_knowledge_msgs.msg.DomainFormula()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.typed_parameters = []
        for i in range(0, length):
          val2 = diagnostic_msgs.msg.KeyValue()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.key = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.value = str[start:end]
          val1.typed_parameters.append(val2)
        self.op.over_all_neg_condition.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.op.at_end_neg_condition = []
      for i in range(0, length):
        val1 = rosplan_knowledge_msgs.msg.DomainFormula()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.typed_parameters = []
        for i in range(0, length):
          val2 = diagnostic_msgs.msg.KeyValue()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.key = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.value = str[start:end]
          val1.typed_parameters.append(val2)
        self.op.at_end_neg_condition.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.op.at_start_comparison = []
      for i in range(0, length):
        val1 = rosplan_knowledge_msgs.msg.DomainInequality()
        start = end
        end += 1
        (val1.comparison_type,) = _get_struct_B().unpack(str[start:end])
        _v81 = val1.LHS
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v81.tokens = []
        for i in range(0, length):
          val3 = rosplan_knowledge_msgs.msg.ExprBase()
          _x = val3
          start = end
          end += 9
          (_x.expr_type, _x.constant,) = _get_struct_Bd().unpack(str[start:end])
          _v82 = val3.function
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v82.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v82.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v82.typed_parameters = []
          for i in range(0, length):
            val5 = diagnostic_msgs.msg.KeyValue()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.key = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.key = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.value = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.value = str[start:end]
            _v82.typed_parameters.append(val5)
          _x = val3
          start = end
          end += 2
          (_x.op, _x.special_type,) = _get_struct_2B().unpack(str[start:end])
          _v81.tokens.append(val3)
        _v83 = val1.RHS
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v83.tokens = []
        for i in range(0, length):
          val3 = rosplan_knowledge_msgs.msg.ExprBase()
          _x = val3
          start = end
          end += 9
          (_x.expr_type, _x.constant,) = _get_struct_Bd().unpack(str[start:end])
          _v84 = val3.function
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v84.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v84.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v84.typed_parameters = []
          for i in range(0, length):
            val5 = diagnostic_msgs.msg.KeyValue()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.key = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.key = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.value = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.value = str[start:end]
            _v84.typed_parameters.append(val5)
          _x = val3
          start = end
          end += 2
          (_x.op, _x.special_type,) = _get_struct_2B().unpack(str[start:end])
          _v83.tokens.append(val3)
        start = end
        end += 1
        (val1.grounded,) = _get_struct_B().unpack(str[start:end])
        val1.grounded = bool(val1.grounded)
        self.op.at_start_comparison.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.op.at_end_comparison = []
      for i in range(0, length):
        val1 = rosplan_knowledge_msgs.msg.DomainInequality()
        start = end
        end += 1
        (val1.comparison_type,) = _get_struct_B().unpack(str[start:end])
        _v85 = val1.LHS
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v85.tokens = []
        for i in range(0, length):
          val3 = rosplan_knowledge_msgs.msg.ExprBase()
          _x = val3
          start = end
          end += 9
          (_x.expr_type, _x.constant,) = _get_struct_Bd().unpack(str[start:end])
          _v86 = val3.function
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v86.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v86.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v86.typed_parameters = []
          for i in range(0, length):
            val5 = diagnostic_msgs.msg.KeyValue()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.key = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.key = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.value = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.value = str[start:end]
            _v86.typed_parameters.append(val5)
          _x = val3
          start = end
          end += 2
          (_x.op, _x.special_type,) = _get_struct_2B().unpack(str[start:end])
          _v85.tokens.append(val3)
        _v87 = val1.RHS
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v87.tokens = []
        for i in range(0, length):
          val3 = rosplan_knowledge_msgs.msg.ExprBase()
          _x = val3
          start = end
          end += 9
          (_x.expr_type, _x.constant,) = _get_struct_Bd().unpack(str[start:end])
          _v88 = val3.function
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v88.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v88.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v88.typed_parameters = []
          for i in range(0, length):
            val5 = diagnostic_msgs.msg.KeyValue()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.key = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.key = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.value = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.value = str[start:end]
            _v88.typed_parameters.append(val5)
          _x = val3
          start = end
          end += 2
          (_x.op, _x.special_type,) = _get_struct_2B().unpack(str[start:end])
          _v87.tokens.append(val3)
        start = end
        end += 1
        (val1.grounded,) = _get_struct_B().unpack(str[start:end])
        val1.grounded = bool(val1.grounded)
        self.op.at_end_comparison.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.op.over_all_comparison = []
      for i in range(0, length):
        val1 = rosplan_knowledge_msgs.msg.DomainInequality()
        start = end
        end += 1
        (val1.comparison_type,) = _get_struct_B().unpack(str[start:end])
        _v89 = val1.LHS
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v89.tokens = []
        for i in range(0, length):
          val3 = rosplan_knowledge_msgs.msg.ExprBase()
          _x = val3
          start = end
          end += 9
          (_x.expr_type, _x.constant,) = _get_struct_Bd().unpack(str[start:end])
          _v90 = val3.function
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v90.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v90.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v90.typed_parameters = []
          for i in range(0, length):
            val5 = diagnostic_msgs.msg.KeyValue()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.key = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.key = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.value = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.value = str[start:end]
            _v90.typed_parameters.append(val5)
          _x = val3
          start = end
          end += 2
          (_x.op, _x.special_type,) = _get_struct_2B().unpack(str[start:end])
          _v89.tokens.append(val3)
        _v91 = val1.RHS
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v91.tokens = []
        for i in range(0, length):
          val3 = rosplan_knowledge_msgs.msg.ExprBase()
          _x = val3
          start = end
          end += 9
          (_x.expr_type, _x.constant,) = _get_struct_Bd().unpack(str[start:end])
          _v92 = val3.function
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v92.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v92.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v92.typed_parameters = []
          for i in range(0, length):
            val5 = diagnostic_msgs.msg.KeyValue()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.key = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.key = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.value = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.value = str[start:end]
            _v92.typed_parameters.append(val5)
          _x = val3
          start = end
          end += 2
          (_x.op, _x.special_type,) = _get_struct_2B().unpack(str[start:end])
          _v91.tokens.append(val3)
        start = end
        end += 1
        (val1.grounded,) = _get_struct_B().unpack(str[start:end])
        val1.grounded = bool(val1.grounded)
        self.op.over_all_comparison.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_Bd = None
def _get_struct_Bd():
    global _struct_Bd
    if _struct_Bd is None:
        _struct_Bd = struct.Struct("<Bd")
    return _struct_Bd
class GetDomainOperatorDetailsService(object):
  _type          = 'rosplan_knowledge_msgs/GetDomainOperatorDetailsService'
  _md5sum = 'ea304d01d151ad19fdb0e9adb942df1a'
  _request_class  = GetDomainOperatorDetailsServiceRequest
  _response_class = GetDomainOperatorDetailsServiceResponse
